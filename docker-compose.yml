services:
  # Database Services
  postgres:
    image: postgres:15-alpine
    container_name: sgd-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-sgd_db}
      POSTGRES_USER: ${POSTGRES_USER:-sgd_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-sgd_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/01-init-db.sql:ro
      - ./scripts/init-supabase.sql:/docker-entrypoint-initdb.d/02-init-supabase.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-sgd_user} -d ${POSTGRES_DB:-sgd_db}"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - sgd-network

  # Object Storage
  minio:
    image: minio/minio:latest
    container_name: sgd-minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-sgd_minio}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-sgd_minio_password}
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - sgd-network

  # Vector Database
  weaviate:
    image: semitechnologies/weaviate:1.21.8
    container_name: sgd-weaviate
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      DEFAULT_VECTORIZER_MODULE: 'text2vec-openai'
      ENABLE_MODULES: 'text2vec-openai'
      OPENAI_APIKEY: ${OPENAI_API_KEY:-}
      CLUSTER_HOSTNAME: 'node1'
      LOG_LEVEL: 'info'
    ports:
      - "8080:8080"
    volumes:
      - weaviate_data:/var/lib/weaviate
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/v1/.well-known/ready || exit 1"]
      interval: 30s
      timeout: 20s
      retries: 5
      start_period: 60s
    networks:
      - sgd-network

  # Authentication & Authorization
  supabase-db:
    image: supabase/postgres:15.1.0.117
    container_name: sgd-supabase-db
    environment:
      POSTGRES_HOST: /var/run/postgresql
      PGPORT: 5432
      POSTGRES_PORT: 5432
      PGPASSWORD: ${POSTGRES_PASSWORD:-sgd_password}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-sgd_password}
      PGDATABASE: postgres
      POSTGRES_DB: postgres
      PGUSER: supabase_admin
      POSTGRES_USER: supabase_admin
      PGDATA: /var/lib/postgresql/data
      POSTGRES_INITDB_ARGS: '--auth-host=md5 --auth-local=md5'
    ports:
      - "54322:5432"
    volumes:
      - supabase_db_data:/var/lib/postgresql/data
    command: >
      postgres
      -c config_file=/etc/postgresql/postgresql.conf
      -c log_min_messages=fatal
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U supabase_admin -h localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - sgd-network

  supabase-auth:
    image: supabase/gotrue:v2.132.3
    container_name: sgd-supabase-auth
    environment:
      GOTRUE_API_HOST: 0.0.0.0
      GOTRUE_API_PORT: 9999
      API_EXTERNAL_URL: http://localhost:8000
      GOTRUE_DB_DRIVER: postgres
      GOTRUE_DB_DATABASE_URL: postgresql://supabase_admin:${POSTGRES_PASSWORD:-sgd_password}@supabase-db:5432/postgres?search_path=auth&sslmode=disable
      GOTRUE_SITE_URL: http://localhost:3000
      GOTRUE_URI_ALLOW_LIST: '*'
      GOTRUE_DISABLE_SIGNUP: false
      GOTRUE_JWT_ADMIN_ROLES: service_role
      GOTRUE_JWT_AUD: authenticated
      GOTRUE_JWT_DEFAULT_GROUP_NAME: authenticated
      GOTRUE_JWT_EXP: 3600
      GOTRUE_JWT_SECRET: ${JWT_SECRET_KEY:-your-super-secret-jwt-token-with-at-least-32-characters-long}
      GOTRUE_EXTERNAL_EMAIL_ENABLED: true
      GOTRUE_MAILER_AUTOCONFIRM: true
      GOTRUE_SMTP_ADMIN_EMAIL: ${SMTP_USER:-admin@sgd.com}
      GOTRUE_SMTP_HOST: ${SMTP_HOST:-smtp.gmail.com}
      GOTRUE_SMTP_PORT: ${SMTP_PORT:-587}
      GOTRUE_SMTP_USER: ${SMTP_USER:-}
      GOTRUE_SMTP_PASS: ${SMTP_PASSWORD:-}
      GOTRUE_SMTP_SENDER_NAME: SGD System
      GOTRUE_MAILER_URLPATHS_INVITE: http://localhost:3000/auth/callback
      GOTRUE_MAILER_URLPATHS_CONFIRMATION: http://localhost:3000/auth/callback
      GOTRUE_MAILER_URLPATHS_RECOVERY: http://localhost:3000/auth/callback
      GOTRUE_MAILER_URLPATHS_EMAIL_CHANGE: http://localhost:3000/auth/callback
    ports:
      - "9999:9999"
    depends_on:
      supabase-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9999/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - sgd-network

  supabase-rest:
    image: postgrest/postgrest:v12.0.1
    container_name: sgd-supabase-rest
    environment:
      PGRST_DB_URI: postgresql://supabase_admin:${POSTGRES_PASSWORD:-sgd_password}@supabase-db:5432/postgres
      PGRST_DB_SCHEMAS: public,storage,graphql_public
      PGRST_DB_ANON_ROLE: anon
      PGRST_JWT_SECRET: ${JWT_SECRET_KEY:-your-super-secret-jwt-token-with-at-least-32-characters-long}
      PGRST_DB_USE_LEGACY_GUCS: false
      PGRST_APP_SETTINGS_JWT_SECRET: ${JWT_SECRET_KEY:-your-super-secret-jwt-token-with-at-least-32-characters-long}
      PGRST_APP_SETTINGS_JWT_EXP: 3600
    ports:
      - "3001:3000"
    depends_on:
      supabase-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - sgd-network

  # Workflow Automation
  n8n:
    image: n8nio/n8n:latest
    container_name: sgd-n8n
    environment:
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: postgres
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_DATABASE: ${POSTGRES_DB:-sgd_db}
      DB_POSTGRESDB_USER: ${POSTGRES_USER:-sgd_user}
      DB_POSTGRESDB_PASSWORD: ${POSTGRES_PASSWORD:-sgd_password}
      N8N_BASIC_AUTH_ACTIVE: true
      N8N_BASIC_AUTH_USER: ${N8N_BASIC_AUTH_USER:-admin}
      N8N_BASIC_AUTH_PASSWORD: ${N8N_BASIC_AUTH_PASSWORD:-admin_password}
      WEBHOOK_URL: http://localhost:5678/
      GENERIC_TIMEZONE: ${GENERIC_TIMEZONE:-Europe/Berlin}
    ports:
      - "5678:5678"
    volumes:
      - n8n_data:/home/node/.n8n
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5678/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - sgd-network

  # Backend API Service
  api-service:
    build:
      context: ./backend/api
      dockerfile: Dockerfile
    container_name: sgd-api
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-sgd_user}:${POSTGRES_PASSWORD:-sgd_password}@postgres:5432/${POSTGRES_DB:-sgd_db}
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER:-sgd_minio}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD:-sgd_minio_password}
      WEAVIATE_URL: http://weaviate:8080
      SUPABASE_URL: http://supabase-rest:3000
      SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY:-your-anon-key}
      SUPABASE_SERVICE_ROLE_KEY: ${SUPABASE_SERVICE_ROLE_KEY:-your-service-role-key}
      AI_SERVICE_URL: http://ai-service:8001
      AUDIT_SERVICE_URL: http://audit-service:8002
      REDIS_URL: redis://redis:6379
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
      weaviate:
        condition: service_healthy
      supabase-auth:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - sgd-network

  # AI/ML Service
  ai-service:
    build:
      context: ./backend/ai-service
      dockerfile: Dockerfile
    container_name: sgd-ai
    environment:
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      WEAVIATE_URL: http://weaviate:8080
      REDIS_URL: redis://redis:6379
    ports:
      - "8001:8001"
    depends_on:
      weaviate:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - sgd-network

  # Audit Service
  audit-service:
    build:
      context: ./backend/audit-service
      dockerfile: Dockerfile
    container_name: sgd-audit
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-sgd_user}:${POSTGRES_PASSWORD:-sgd_password}@postgres:5432/${POSTGRES_DB:-sgd_db}
      REDIS_URL: redis://redis:6379
    ports:
      - "8002:8002"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - sgd-network

  # Cache
  redis:
    image: redis:7-alpine
    container_name: sgd-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - sgd-network

  # Frontend Application
  # Frontend Application (commented out for now - can be run separately)
  # frontend:
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile
  #   container_name: sgd-frontend
  #   environment:
  #     NEXT_PUBLIC_API_URL: http://localhost:8000
  #     NEXT_PUBLIC_KEYCLOAK_URL: http://localhost:8090
  #     NEXT_PUBLIC_KEYCLOAK_REALM: ${KEYCLOAK_REALM:-sgd-realm}
  #     NEXT_PUBLIC_KEYCLOAK_CLIENT_ID: ${KEYCLOAK_CLIENT_ID:-sgd-client}
  #   ports:
  #     - "3000:3000"
  #   depends_on:
  #     api-service:
  #       condition: service_healthy
  #   healthcheck:
  #     test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #   networks:
  #     - sgd-network

volumes:
  postgres_data:
  supabase_db_data:
  minio_data:
  weaviate_data:
  n8n_data:
  redis_data:

networks:
  sgd-network:
    driver: bridge