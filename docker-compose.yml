services:
  # Database Services
  postgres:
    image: postgres:15-alpine
    container_name: sgd-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-sgd_db}
      POSTGRES_USER: ${POSTGRES_USER:-sgd_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-sgd_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-sgd_user} -d ${POSTGRES_DB:-sgd_db}"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - sgd-network

  # Object Storage
  minio:
    image: minio/minio:latest
    container_name: sgd-minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-sgd_minio}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-sgd_minio_password}
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - sgd-network

  # Vector Database
  weaviate:
    image: semitechnologies/weaviate:1.22.4
    container_name: sgd-weaviate
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      DEFAULT_VECTORIZER_MODULE: 'none'
      CLUSTER_HOSTNAME: 'node1'
    ports:
      - "8080:8080"
    volumes:
      - weaviate_data:/var/lib/weaviate
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/.well-known/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - sgd-network

  # Authentication & Authorization
  keycloak:
    image: quay.io/keycloak/keycloak:22.0
    container_name: sgd-keycloak
    environment:
      KC_DB: postgres
      KC_DB_URL_HOST: postgres
      KC_DB_URL_DATABASE: ${POSTGRES_DB:-sgd_db}
      KC_DB_USERNAME: ${POSTGRES_USER:-sgd_user}
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD:-sgd_password}
      KC_HOSTNAME: localhost
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN:-admin}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD:-admin_password}
    ports:
      - "8090:8080"
    volumes:
      - keycloak_data:/opt/keycloak/data
    command: start-dev
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - sgd-network

  # Workflow Automation
  n8n:
    image: n8nio/n8n:latest
    container_name: sgd-n8n
    environment:
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: postgres
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_DATABASE: ${POSTGRES_DB:-sgd_db}
      DB_POSTGRESDB_USER: ${POSTGRES_USER:-sgd_user}
      DB_POSTGRESDB_PASSWORD: ${POSTGRES_PASSWORD:-sgd_password}
      N8N_BASIC_AUTH_ACTIVE: true
      N8N_BASIC_AUTH_USER: ${N8N_BASIC_AUTH_USER:-admin}
      N8N_BASIC_AUTH_PASSWORD: ${N8N_BASIC_AUTH_PASSWORD:-admin_password}
      WEBHOOK_URL: http://localhost:5678/
      GENERIC_TIMEZONE: ${GENERIC_TIMEZONE:-Europe/Berlin}
    ports:
      - "5678:5678"
    volumes:
      - n8n_data:/home/node/.n8n
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5678/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - sgd-network

  # Backend API Service
  api-service:
    build:
      context: ./backend/api
      dockerfile: Dockerfile
    container_name: sgd-api
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-sgd_user}:${POSTGRES_PASSWORD:-sgd_password}@postgres:5432/${POSTGRES_DB:-sgd_db}
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER:-sgd_minio}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD:-sgd_minio_password}
      WEAVIATE_URL: http://weaviate:8080
      KEYCLOAK_URL: http://keycloak:8080
      AI_SERVICE_URL: http://ai-service:8001
      AUDIT_SERVICE_URL: http://audit-service:8002
      REDIS_URL: redis://redis:6379
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
      weaviate:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - sgd-network

  # AI/ML Service
  ai-service:
    build:
      context: ./backend/ai-service
      dockerfile: Dockerfile
    container_name: sgd-ai
    environment:
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      WEAVIATE_URL: http://weaviate:8080
      REDIS_URL: redis://redis:6379
    ports:
      - "8001:8001"
    depends_on:
      weaviate:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - sgd-network

  # Audit Service
  audit-service:
    build:
      context: ./backend/audit-service
      dockerfile: Dockerfile
    container_name: sgd-audit
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-sgd_user}:${POSTGRES_PASSWORD:-sgd_password}@postgres:5432/${POSTGRES_DB:-sgd_db}
      REDIS_URL: redis://redis:6379
    ports:
      - "8002:8002"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - sgd-network

  # Cache
  redis:
    image: redis:7-alpine
    container_name: sgd-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - sgd-network

  # Frontend Application
  # Frontend Application (commented out for now - can be run separately)
  # frontend:
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile
  #   container_name: sgd-frontend
  #   environment:
  #     NEXT_PUBLIC_API_URL: http://localhost:8000
  #     NEXT_PUBLIC_KEYCLOAK_URL: http://localhost:8090
  #     NEXT_PUBLIC_KEYCLOAK_REALM: ${KEYCLOAK_REALM:-sgd-realm}
  #     NEXT_PUBLIC_KEYCLOAK_CLIENT_ID: ${KEYCLOAK_CLIENT_ID:-sgd-client}
  #   ports:
  #     - "3000:3000"
  #   depends_on:
  #     api-service:
  #       condition: service_healthy
  #   healthcheck:
  #     test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #   networks:
  #     - sgd-network

volumes:
  postgres_data:
  minio_data:
  weaviate_data:
  keycloak_data:
  n8n_data:
  redis_data:

networks:
  sgd-network:
    driver: bridge